/*
 * Swagger Appointment managment - RTM - OpenAPI 3.1
 *
 * This is the OpenAPI 3.0 specification of Appointment managment - RTM.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: mehmet-ali.asar@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using AppointmentManagement.API.Converters;

namespace AppointmentManagement.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CONTACT : IEquatable<CONTACT>
    {
        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [Required]
        [DataMember(Name="ContactID", EmitDefaultValue=true)]
        public Object ContactID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [Required]
        [DataMember(Name="PostalCode", EmitDefaultValue=true)]
        public Object PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [Required]
        [MaxLength(50)]
        [DataMember(Name="Street", EmitDefaultValue=true)]
        public Object Street { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [Required]
        [MaxLength(50)]
        [DataMember(Name="City", EmitDefaultValue=true)]
        public Object City { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="Note", EmitDefaultValue=true)]
        public Object Note { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="Email", EmitDefaultValue=true)]
        public Object Email { get; set; }

        /// <summary>
        /// Gets or Sets ContactType
        /// </summary>
        [Required]
        [DataMember(Name="ContactType", EmitDefaultValue=true)]
        public Object ContactType { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [Required]
        [DataMember(Name="Telephone", EmitDefaultValue=true)]
        public Object Telephone { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [Required]
        [MaxLength(50)]
        [DataMember(Name="Company", EmitDefaultValue=true)]
        public Object Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CONTACT {\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CONTACT)obj);
        }

        /// <summary>
        /// Returns true if CONTACT instances are equal
        /// </summary>
        /// <param name="other">Instance of CONTACT to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CONTACT other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactID == other.ContactID ||
                    ContactID != null &&
                    ContactID.Equals(other.ContactID)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    ContactType == other.ContactType ||
                    ContactType != null &&
                    ContactType.Equals(other.ContactType)
                ) && 
                (
                    Telephone == other.Telephone ||
                    Telephone != null &&
                    Telephone.Equals(other.Telephone)
                ) && 
                (
                    Company == other.Company ||
                    Company != null &&
                    Company.Equals(other.Company)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactID != null)
                    hashCode = hashCode * 59 + ContactID.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (ContactType != null)
                    hashCode = hashCode * 59 + ContactType.GetHashCode();
                    if (Telephone != null)
                    hashCode = hashCode * 59 + Telephone.GetHashCode();
                    if (Company != null)
                    hashCode = hashCode * 59 + Company.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CONTACT left, CONTACT right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CONTACT left, CONTACT right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
