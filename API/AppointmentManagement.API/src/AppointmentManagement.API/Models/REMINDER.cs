/*
 * Swagger Appointment managment - RTM - OpenAPI 3.1
 *
 * This is the OpenAPI 3.1 specification of Appointment managment - RTM.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: mehmet-ali.asar@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using AppointmentManagement.API.Converters;

namespace AppointmentManagement.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class REMINDER : IEquatable<REMINDER>
    {
        /// <summary>
        /// Gets or Sets ReminderID
        /// </summary>
        [Required]
        [DataMember(Name="ReminderID", EmitDefaultValue=true)]
        public Object ReminderID { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentID
        /// </summary>
        [Required]
        [DataMember(Name="AppointmentID", EmitDefaultValue=true)]
        public Object AppointmentID { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [Required]
        [DataMember(Name="Time", EmitDefaultValue=true)]
        public Object Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class REMINDER {\n");
            sb.Append("  ReminderID: ").Append(ReminderID).Append("\n");
            sb.Append("  AppointmentID: ").Append(AppointmentID).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((REMINDER)obj);
        }

        /// <summary>
        /// Returns true if REMINDER instances are equal
        /// </summary>
        /// <param name="other">Instance of REMINDER to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(REMINDER other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReminderID == other.ReminderID ||
                    ReminderID != null &&
                    ReminderID.Equals(other.ReminderID)
                ) && 
                (
                    AppointmentID == other.AppointmentID ||
                    AppointmentID != null &&
                    AppointmentID.Equals(other.AppointmentID)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReminderID != null)
                    hashCode = hashCode * 59 + ReminderID.GetHashCode();
                    if (AppointmentID != null)
                    hashCode = hashCode * 59 + AppointmentID.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(REMINDER left, REMINDER right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(REMINDER left, REMINDER right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
