/*
 * Swagger Appointment managment - RTM - OpenAPI 3.1
 *
 * This is the OpenAPI 3.0 specification of Appointment managment - RTM.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: mehmet-ali.asar@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AppointmentManagement.Client.Client.OpenAPIDateConverter;

namespace AppointmentManagement.Client.Model
{
    /// <summary>
    /// REMINDER
    /// </summary>
    [DataContract(Name = "REMINDER")]
    public partial class REMINDER : IEquatable<REMINDER>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="REMINDER" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected REMINDER() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="REMINDER" /> class.
        /// </summary>
        /// <param name="reminderID">reminderID (required).</param>
        /// <param name="appointmentID">appointmentID (required).</param>
        /// <param name="time">time (required).</param>
        public REMINDER(Object reminderID = default(Object), Object appointmentID = default(Object), Object time = default(Object))
        {
            // to ensure "reminderID" is required (not null)
            if (reminderID == null)
            {
                throw new ArgumentNullException("reminderID is a required property for REMINDER and cannot be null");
            }
            this.ReminderID = reminderID;
            // to ensure "appointmentID" is required (not null)
            if (appointmentID == null)
            {
                throw new ArgumentNullException("appointmentID is a required property for REMINDER and cannot be null");
            }
            this.AppointmentID = appointmentID;
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new ArgumentNullException("time is a required property for REMINDER and cannot be null");
            }
            this.Time = time;
        }

        /// <summary>
        /// Gets or Sets ReminderID
        /// </summary>
        [DataMember(Name = "ReminderID", IsRequired = true, EmitDefaultValue = true)]
        public Object ReminderID { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentID
        /// </summary>
        [DataMember(Name = "AppointmentID", IsRequired = true, EmitDefaultValue = true)]
        public Object AppointmentID { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "Time", IsRequired = true, EmitDefaultValue = true)]
        public Object Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class REMINDER {\n");
            sb.Append("  ReminderID: ").Append(ReminderID).Append("\n");
            sb.Append("  AppointmentID: ").Append(AppointmentID).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as REMINDER);
        }

        /// <summary>
        /// Returns true if REMINDER instances are equal
        /// </summary>
        /// <param name="input">Instance of REMINDER to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(REMINDER input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReminderID == input.ReminderID ||
                    (this.ReminderID != null &&
                    this.ReminderID.Equals(input.ReminderID))
                ) && 
                (
                    this.AppointmentID == input.AppointmentID ||
                    (this.AppointmentID != null &&
                    this.AppointmentID.Equals(input.AppointmentID))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReminderID != null)
                {
                    hashCode = (hashCode * 59) + this.ReminderID.GetHashCode();
                }
                if (this.AppointmentID != null)
                {
                    hashCode = (hashCode * 59) + this.AppointmentID.GetHashCode();
                }
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
