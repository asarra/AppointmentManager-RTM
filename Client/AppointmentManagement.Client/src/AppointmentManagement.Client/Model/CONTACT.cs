/*
 * Swagger Appointment managment - RTM - OpenAPI 3.1
 *
 * This is the OpenAPI 3.0 specification of Appointment managment - RTM.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: mehmet-ali.asar@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AppointmentManagement.Client.Client.OpenAPIDateConverter;

namespace AppointmentManagement.Client.Model
{
    /// <summary>
    /// CONTACT
    /// </summary>
    [DataContract(Name = "CONTACT")]
    public partial class CONTACT : IEquatable<CONTACT>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CONTACT" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CONTACT() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CONTACT" /> class.
        /// </summary>
        /// <param name="contactID">contactID (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="postalCode">postalCode (required).</param>
        /// <param name="street">street (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="note">note.</param>
        /// <param name="email">email (required).</param>
        /// <param name="contactType">contactType (required).</param>
        /// <param name="telephone">telephone (required).</param>
        /// <param name="company">company (required).</param>
        public CONTACT(Object contactID = default(Object), Object name = default(Object), Object postalCode = default(Object), Object street = default(Object), Object city = default(Object), Object note = default(Object), Object email = default(Object), Object contactType = default(Object), Object telephone = default(Object), Object company = default(Object))
        {
            // to ensure "contactID" is required (not null)
            if (contactID == null)
            {
                throw new ArgumentNullException("contactID is a required property for CONTACT and cannot be null");
            }
            this.ContactID = contactID;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CONTACT and cannot be null");
            }
            this.Name = name;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for CONTACT and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new ArgumentNullException("street is a required property for CONTACT and cannot be null");
            }
            this.Street = street;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for CONTACT and cannot be null");
            }
            this.City = city;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CONTACT and cannot be null");
            }
            this.Email = email;
            // to ensure "contactType" is required (not null)
            if (contactType == null)
            {
                throw new ArgumentNullException("contactType is a required property for CONTACT and cannot be null");
            }
            this.ContactType = contactType;
            // to ensure "telephone" is required (not null)
            if (telephone == null)
            {
                throw new ArgumentNullException("telephone is a required property for CONTACT and cannot be null");
            }
            this.Telephone = telephone;
            // to ensure "company" is required (not null)
            if (company == null)
            {
                throw new ArgumentNullException("company is a required property for CONTACT and cannot be null");
            }
            this.Company = company;
            this.Note = note;
        }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name = "ContactID", IsRequired = true, EmitDefaultValue = true)]
        public Object ContactID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "PostalCode", IsRequired = true, EmitDefaultValue = true)]
        public Object PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "Street", IsRequired = true, EmitDefaultValue = true)]
        public Object Street { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "City", IsRequired = true, EmitDefaultValue = true)]
        public Object City { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "Note", EmitDefaultValue = true)]
        public Object Note { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "Email", IsRequired = true, EmitDefaultValue = true)]
        public Object Email { get; set; }

        /// <summary>
        /// Gets or Sets ContactType
        /// </summary>
        [DataMember(Name = "ContactType", IsRequired = true, EmitDefaultValue = true)]
        public Object ContactType { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name = "Telephone", IsRequired = true, EmitDefaultValue = true)]
        public Object Telephone { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "Company", IsRequired = true, EmitDefaultValue = true)]
        public Object Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CONTACT {\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CONTACT);
        }

        /// <summary>
        /// Returns true if CONTACT instances are equal
        /// </summary>
        /// <param name="input">Instance of CONTACT to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CONTACT input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ContactType == input.ContactType ||
                    (this.ContactType != null &&
                    this.ContactType.Equals(input.ContactType))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactID != null)
                {
                    hashCode = (hashCode * 59) + this.ContactID.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.ContactType != null)
                {
                    hashCode = (hashCode * 59) + this.ContactType.GetHashCode();
                }
                if (this.Telephone != null)
                {
                    hashCode = (hashCode * 59) + this.Telephone.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Street (Object) maxLength
            if (this.Street != null && this.Street.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street, length must be less than 50.", new [] { "Street" });
            }

            // City (Object) maxLength
            if (this.City != null && this.City.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 50.", new [] { "City" });
            }

            // Company (Object) maxLength
            if (this.Company != null && this.Company.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Company, length must be less than 50.", new [] { "Company" });
            }

            yield break;
        }
    }

}
