/*
 * Swagger Appointment managment - RTM - OpenAPI 3.1
 *
 * This is the OpenAPI 3.0 specification of Appointment managment - RTM.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: mehmet-ali.asar@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AppointmentManagement.Client.Client.OpenAPIDateConverter;

namespace AppointmentManagement.Client.Model
{
    /// <summary>
    /// APPOINTMENT
    /// </summary>
    [DataContract(Name = "APPOINTMENT")]
    public partial class APPOINTMENT : IEquatable<APPOINTMENT>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APPOINTMENT" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected APPOINTMENT() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="APPOINTMENT" /> class.
        /// </summary>
        /// <param name="appointmentID">appointmentID (required).</param>
        /// <param name="contactID">contactID (required).</param>
        /// <param name="repetition">repetition (required).</param>
        /// <param name="topic">topic (required).</param>
        /// <param name="note">note.</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="city">city (required).</param>
        public APPOINTMENT(Object appointmentID = default(Object), Object contactID = default(Object), Object repetition = default(Object), Object topic = default(Object), Object note = default(Object), Object startTime = default(Object), Object endTime = default(Object), Object city = default(Object))
        {
            // to ensure "appointmentID" is required (not null)
            if (appointmentID == null)
            {
                throw new ArgumentNullException("appointmentID is a required property for APPOINTMENT and cannot be null");
            }
            this.AppointmentID = appointmentID;
            // to ensure "contactID" is required (not null)
            if (contactID == null)
            {
                throw new ArgumentNullException("contactID is a required property for APPOINTMENT and cannot be null");
            }
            this.ContactID = contactID;
            // to ensure "repetition" is required (not null)
            if (repetition == null)
            {
                throw new ArgumentNullException("repetition is a required property for APPOINTMENT and cannot be null");
            }
            this.Repetition = repetition;
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new ArgumentNullException("topic is a required property for APPOINTMENT and cannot be null");
            }
            this.Topic = topic;
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new ArgumentNullException("startTime is a required property for APPOINTMENT and cannot be null");
            }
            this.StartTime = startTime;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for APPOINTMENT and cannot be null");
            }
            this.City = city;
            this.Note = note;
            this.EndTime = endTime;
        }

        /// <summary>
        /// Gets or Sets AppointmentID
        /// </summary>
        [DataMember(Name = "AppointmentID", IsRequired = true, EmitDefaultValue = true)]
        public Object AppointmentID { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name = "ContactID", IsRequired = true, EmitDefaultValue = true)]
        public Object ContactID { get; set; }

        /// <summary>
        /// Gets or Sets Repetition
        /// </summary>
        [DataMember(Name = "Repetition", IsRequired = true, EmitDefaultValue = true)]
        public Object Repetition { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "Topic", IsRequired = true, EmitDefaultValue = true)]
        public Object Topic { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "Note", EmitDefaultValue = true)]
        public Object Note { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = true, EmitDefaultValue = true)]
        public Object StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "EndTime", EmitDefaultValue = true)]
        public Object EndTime { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "City", IsRequired = true, EmitDefaultValue = true)]
        public Object City { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APPOINTMENT {\n");
            sb.Append("  AppointmentID: ").Append(AppointmentID).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  Repetition: ").Append(Repetition).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APPOINTMENT);
        }

        /// <summary>
        /// Returns true if APPOINTMENT instances are equal
        /// </summary>
        /// <param name="input">Instance of APPOINTMENT to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APPOINTMENT input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppointmentID == input.AppointmentID ||
                    (this.AppointmentID != null &&
                    this.AppointmentID.Equals(input.AppointmentID))
                ) && 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && 
                (
                    this.Repetition == input.Repetition ||
                    (this.Repetition != null &&
                    this.Repetition.Equals(input.Repetition))
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppointmentID != null)
                {
                    hashCode = (hashCode * 59) + this.AppointmentID.GetHashCode();
                }
                if (this.ContactID != null)
                {
                    hashCode = (hashCode * 59) + this.ContactID.GetHashCode();
                }
                if (this.Repetition != null)
                {
                    hashCode = (hashCode * 59) + this.Repetition.GetHashCode();
                }
                if (this.Topic != null)
                {
                    hashCode = (hashCode * 59) + this.Topic.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // City (Object) maxLength
            if (this.City != null && this.City.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 50.", new [] { "City" });
            }

            yield break;
        }
    }

}
