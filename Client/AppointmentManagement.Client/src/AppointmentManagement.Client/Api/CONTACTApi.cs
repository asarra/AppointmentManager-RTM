/*
 * Swagger Appointment managment - RTM - OpenAPI 3.1
 *
 * This is the OpenAPI 3.0 specification of Appointment managment - RTM.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: mehmet-ali.asar@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AppointmentManagement.Client.Client;
using AppointmentManagement.Client.Client.Auth;
using AppointmentManagement.Client.Model;

namespace AppointmentManagement.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICONTACTApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateContact(CONTACT CONTACT, int operationIndex = 0);

        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateContactWithHttpInfo(CONTACT CONTACT, int operationIndex = 0);
        /// <summary>
        /// Delete a single contact
        /// </summary>
        /// <remarks>
        /// Delete a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteContact(Object contactID, int operationIndex = 0);

        /// <summary>
        /// Delete a single contact
        /// </summary>
        /// <remarks>
        /// Delete a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo(Object contactID, int operationIndex = 0);
        /// <summary>
        /// Get a single contact
        /// </summary>
        /// <remarks>
        /// Get a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetContact(Object contactID, int operationIndex = 0);

        /// <summary>
        /// Get a single contact
        /// </summary>
        /// <remarks>
        /// Get a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContactWithHttpInfo(Object contactID, int operationIndex = 0);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Get all contacts as JSON
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetContacts(int operationIndex = 0);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Get all contacts as JSON
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetContactsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Replace a single contact
        /// </summary>
        /// <remarks>
        /// Replace a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ReplaceContact(Object contactID, CONTACT CONTACT, int operationIndex = 0);

        /// <summary>
        /// Replace a single contact
        /// </summary>
        /// <remarks>
        /// Replace a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceContactWithHttpInfo(Object contactID, CONTACT CONTACT, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICONTACTApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateContactAsync(CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactWithHttpInfoAsync(CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a single contact
        /// </summary>
        /// <remarks>
        /// Delete a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a single contact
        /// </summary>
        /// <remarks>
        /// Delete a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactWithHttpInfoAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a single contact
        /// </summary>
        /// <remarks>
        /// Get a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContactAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single contact
        /// </summary>
        /// <remarks>
        /// Get a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContactWithHttpInfoAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Get all contacts as JSON
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetContactsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Get all contacts as JSON
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContactsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a single contact
        /// </summary>
        /// <remarks>
        /// Replace a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceContactAsync(Object contactID, CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace a single contact
        /// </summary>
        /// <remarks>
        /// Replace a single contact by Id
        /// </remarks>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceContactWithHttpInfoAsync(Object contactID, CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICONTACTApi : ICONTACTApiSync, ICONTACTApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CONTACTApi : ICONTACTApi
    {
        private AppointmentManagement.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CONTACTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CONTACTApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CONTACTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CONTACTApi(string basePath)
        {
            this.Configuration = AppointmentManagement.Client.Client.Configuration.MergeConfigurations(
                AppointmentManagement.Client.Client.GlobalConfiguration.Instance,
                new AppointmentManagement.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AppointmentManagement.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AppointmentManagement.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AppointmentManagement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CONTACTApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CONTACTApi(AppointmentManagement.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppointmentManagement.Client.Client.Configuration.MergeConfigurations(
                AppointmentManagement.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AppointmentManagement.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AppointmentManagement.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AppointmentManagement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CONTACTApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CONTACTApi(AppointmentManagement.Client.Client.ISynchronousClient client, AppointmentManagement.Client.Client.IAsynchronousClient asyncClient, AppointmentManagement.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppointmentManagement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppointmentManagement.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppointmentManagement.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppointmentManagement.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppointmentManagement.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new contact Create a new contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateContact(CONTACT CONTACT, int operationIndex = 0)
        {
            CreateContactWithHttpInfo(CONTACT);
        }

        /// <summary>
        /// Create a new contact Create a new contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppointmentManagement.Client.Client.ApiResponse<Object> CreateContactWithHttpInfo(CONTACT CONTACT, int operationIndex = 0)
        {
            // verify the required parameter 'CONTACT' is set
            if (CONTACT == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'CONTACT' when calling CONTACTApi->CreateContact");
            }

            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = CONTACT;

            localVarRequestOptions.Operation = "CONTACTApi.CreateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new contact Create a new contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateContactAsync(CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateContactWithHttpInfoAsync(CONTACT, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new contact Create a new contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppointmentManagement.Client.Client.ApiResponse<Object>> CreateContactWithHttpInfoAsync(CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'CONTACT' is set
            if (CONTACT == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'CONTACT' when calling CONTACTApi->CreateContact");
            }


            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = CONTACT;

            localVarRequestOptions.Operation = "CONTACTApi.CreateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single contact Delete a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteContact(Object contactID, int operationIndex = 0)
        {
            DeleteContactWithHttpInfo(contactID);
        }

        /// <summary>
        /// Delete a single contact Delete a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppointmentManagement.Client.Client.ApiResponse<Object> DeleteContactWithHttpInfo(Object contactID, int operationIndex = 0)
        {
            // verify the required parameter 'contactID' is set
            if (contactID == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'contactID' when calling CONTACTApi->DeleteContact");
            }

            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", AppointmentManagement.Client.Client.ClientUtils.ParameterToString(contactID)); // path parameter

            localVarRequestOptions.Operation = "CONTACTApi.DeleteContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/contacts/{ContactID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single contact Delete a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactWithHttpInfoAsync(contactID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a single contact Delete a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppointmentManagement.Client.Client.ApiResponse<Object>> DeleteContactWithHttpInfoAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactID' is set
            if (contactID == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'contactID' when calling CONTACTApi->DeleteContact");
            }


            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", AppointmentManagement.Client.Client.ClientUtils.ParameterToString(contactID)); // path parameter

            localVarRequestOptions.Operation = "CONTACTApi.DeleteContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contacts/{ContactID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single contact Get a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetContact(Object contactID, int operationIndex = 0)
        {
            GetContactWithHttpInfo(contactID);
        }

        /// <summary>
        /// Get a single contact Get a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppointmentManagement.Client.Client.ApiResponse<Object> GetContactWithHttpInfo(Object contactID, int operationIndex = 0)
        {
            // verify the required parameter 'contactID' is set
            if (contactID == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'contactID' when calling CONTACTApi->GetContact");
            }

            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", AppointmentManagement.Client.Client.ClientUtils.ParameterToString(contactID)); // path parameter

            localVarRequestOptions.Operation = "CONTACTApi.GetContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/contacts/{ContactID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single contact Get a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContactAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetContactWithHttpInfoAsync(contactID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a single contact Get a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppointmentManagement.Client.Client.ApiResponse<Object>> GetContactWithHttpInfoAsync(Object contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactID' is set
            if (contactID == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'contactID' when calling CONTACTApi->GetContact");
            }


            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", AppointmentManagement.Client.Client.ClientUtils.ParameterToString(contactID)); // path parameter

            localVarRequestOptions.Operation = "CONTACTApi.GetContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/contacts/{ContactID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all contacts Get all contacts as JSON
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetContacts(int operationIndex = 0)
        {
            AppointmentManagement.Client.Client.ApiResponse<Object> localVarResponse = GetContactsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts Get all contacts as JSON
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public AppointmentManagement.Client.Client.ApiResponse<Object> GetContactsWithHttpInfo(int operationIndex = 0)
        {
            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CONTACTApi.GetContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all contacts Get all contacts as JSON
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetContactsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppointmentManagement.Client.Client.ApiResponse<Object> localVarResponse = await GetContactsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts Get all contacts as JSON
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<AppointmentManagement.Client.Client.ApiResponse<Object>> GetContactsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CONTACTApi.GetContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a single contact Replace a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ReplaceContact(Object contactID, CONTACT CONTACT, int operationIndex = 0)
        {
            ReplaceContactWithHttpInfo(contactID, CONTACT);
        }

        /// <summary>
        /// Replace a single contact Replace a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppointmentManagement.Client.Client.ApiResponse<Object> ReplaceContactWithHttpInfo(Object contactID, CONTACT CONTACT, int operationIndex = 0)
        {
            // verify the required parameter 'contactID' is set
            if (contactID == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'contactID' when calling CONTACTApi->ReplaceContact");
            }

            // verify the required parameter 'CONTACT' is set
            if (CONTACT == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'CONTACT' when calling CONTACTApi->ReplaceContact");
            }

            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", AppointmentManagement.Client.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.Data = CONTACT;

            localVarRequestOptions.Operation = "CONTACTApi.ReplaceContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/contacts/{ContactID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a single contact Replace a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceContactAsync(Object contactID, CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReplaceContactWithHttpInfoAsync(contactID, CONTACT, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Replace a single contact Replace a single contact by Id
        /// </summary>
        /// <exception cref="AppointmentManagement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactID"></param>
        /// <param name="CONTACT"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppointmentManagement.Client.Client.ApiResponse<Object>> ReplaceContactWithHttpInfoAsync(Object contactID, CONTACT CONTACT, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactID' is set
            if (contactID == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'contactID' when calling CONTACTApi->ReplaceContact");
            }

            // verify the required parameter 'CONTACT' is set
            if (CONTACT == null)
            {
                throw new AppointmentManagement.Client.Client.ApiException(400, "Missing required parameter 'CONTACT' when calling CONTACTApi->ReplaceContact");
            }


            AppointmentManagement.Client.Client.RequestOptions localVarRequestOptions = new AppointmentManagement.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AppointmentManagement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", AppointmentManagement.Client.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.Data = CONTACT;

            localVarRequestOptions.Operation = "CONTACTApi.ReplaceContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (appointmentmanagement_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contacts/{ContactID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
